name: Local E2E Tests with Azure Functions Core Tools

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
  pull_request:
    branches: [main]
    paths-ignore:
      - "**.md"

jobs:
  local-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: Install Azure Functions Core Tools
        run: |
          npm install -g azure-functions-core-tools@4 --unsafe-perm true

      - name: Install Azurite (Storage Emulator)
        run: npm install -g azurite

      - name: Start Azurite
        run: |
          mkdir -p azurite
          azurite --silent --location azurite &
          echo "Waiting for Azurite to start..."
          sleep 5

      - name: Setup local.settings.json
        run: |
          cat > local.settings.json << 'EOF'
          {
            "IsEncrypted": false,
            "Values": {
              "AzureWebJobsStorage": "UseDevelopmentStorage=true",
              "FUNCTIONS_WORKER_RUNTIME": "python"
            },
            "Host": {
              "LocalHttpPort": 7071,
              "CORS": "*",
              "CORSCredentials": false
            }
          }
          EOF

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build || (echo "Build failed. Creating a minimal build directory for testing." && mkdir -p build/static/js)

      - name: Start Azure Functions
        run: |
          func start &
          echo "Waiting for Azure Functions to start..."
          sleep 15

      - name: Check if Azure Functions are running
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:7071/api/orchestrators/HelloOrchestrator -X POST || echo "Failed to connect")
          echo "Function status code: $response"
          if [[ "$response" != "2"* ]]; then
            echo "Azure Functions are not running properly. Checking logs..."
            cat $(find . -name "func_host_logs.txt" 2>/dev/null || echo "No log file found")
            exit 1
          fi

      - name: Start frontend server for UI tests
        run: |
          cd frontend
          npx serve -s build -l 3000 &
          echo "Waiting for frontend server to start..."
          sleep 10

      - name: Install Playwright
        run: |
          npm init -y
          npm install -D @playwright/test
          npx playwright install --with-deps chromium

      - name: Update Playwright test for complete user journey
        run: |
          mkdir -p e2e-tests
          cat > e2e-tests/durable-function-test.spec.js << 'EOF'
          const { test, expect } = require('@playwright/test');

          test('should verify local HTTP endpoint is available', async ({ request }) => {
            // Get the status URL directly from the API endpoint
            const response = await request.post('http://localhost:7071/api/orchestrators/HelloOrchestrator', {
              timeout: 60000
            });
            
            console.log('Response status:', response.status());
            
            // Verify that we get a successful response code (2xx)
            expect(response.status()).toBeLessThan(300);
            expect(response.status()).toBeGreaterThanOrEqual(200);
            
            const responseBody = await response.json();
            console.log('Response body:', JSON.stringify(responseBody, null, 2));
            
            // Verify that the response contains a statusQueryGetUri
            expect(responseBody.statusQueryGetUri).toBeTruthy();
            console.log('StatusQueryGetUri:', responseBody.statusQueryGetUri);
          });

          test('should complete the full user journey - start orchestration, check status, and verify completion', async ({ page }) => {
            // Navigate to the React app
            await page.goto('http://localhost:3000');
            console.log('Navigated to frontend app');
            
            // Click the "Start Orchestration" button
            await page.click('button:has-text("Start Orchestration")');
            console.log('Clicked Start Orchestration button');
            
            // Wait for the status URL to appear
            const statusUrlElement = await page.waitForSelector('code', { timeout: 30000 });
            const statusUrl = await statusUrlElement.textContent();
            console.log('Status URL found:', statusUrl);
            
            // Verify that it's a valid URI
            expect(statusUrl).toBeTruthy();
            expect(statusUrl).toContain('http');
            
            // Wait a moment for the orchestration to complete
            // This is necessary because Durable Functions take some time to complete
            await page.waitForTimeout(3000);
            
            // Click the "Check Status" button
            await page.click('button:has-text("Check Status")');
            console.log('Clicked Check Status button');
            
            // Wait for the status text to appear
            const statusText = await page.waitForSelector('p:has-text("Status:")', { timeout: 30000 });
            const status = await statusText.textContent();
            console.log('Status found:', status);
            
            // Verify that the status shows "Completed"
            expect(status).toContain('Completed');
            console.log('Successfully verified status is Completed');
          });
          EOF

      - name: Run Playwright Tests
        run: npx playwright test

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
