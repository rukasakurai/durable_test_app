name: Local E2E Tests with Azure Functions Core Tools

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
  pull_request:
    branches: [main]
    paths-ignore:
      - "**.md"

jobs:
  local-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          cd backend
          pip install -r requirements.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: Install Azure Functions Core Tools
        run: |
          npm install -g azure-functions-core-tools@4 --unsafe-perm true

      - name: Install Azurite (Storage Emulator)
        run: npm install -g azurite

      - name: Start Azurite
        run: |
          mkdir -p azurite
          azurite --silent --location azurite &
          echo "Waiting for Azurite to start..."
          sleep 5

      - name: Start Azure Functions
        run: |
          cd backend
          func start &
          echo "Waiting for Azure Functions to start..."
          sleep 30

      - name: Check if Azure Functions are running
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:7071/api/orchestrators/hello_orchestrator -X POST || echo "Failed to connect")
          echo "Function status code: $response"
          if [[ "$response" != "2"* ]]; then
            echo "Azure Functions are not running properly. Checking logs..."
            cat $(find . -name "func_host_logs.txt" 2>/dev/null || echo "No log file found")
            exit 1
          fi
          echo "Azure Functions are running correctly!"

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Start frontend server for UI tests
        run: |
          cd frontend
          npm start &
          echo "Waiting for frontend server to start..."
          sleep 20

      - name: Verify frontend is accessible
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 || echo "Failed to connect")
          echo "Frontend server status code: $response"
          if [[ "$response" != "2"* ]]; then
            echo "Frontend server not running properly."
            exit 1
          fi
          echo "Frontend server is running correctly!"

      - name: Install Playwright
        run: |
          cd tests/e2e
          npm install
          npx playwright install --with-deps chromium

      - name: Run Playwright Tests
        run: |
          cd tests/e2e
          npx playwright test --config playwright.config.ts

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
