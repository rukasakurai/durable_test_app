name: Deploy and Test Azure Function

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
  pull_request:
    branches: [main]
    paths-ignore:
      - "**.md"

env:
  RESOURCE_GROUP: "durable-func-test-rg-${{ github.run_id }}"
  LOCATION: "japaneast"
  FUNCTION_APP_NAME: "df-test-app-${{ github.run_id }}"
  STORAGE_ACCOUNT_NAME: "dfsa${{ github.run_id }}"
  APP_SERVICE_PLAN_NAME: "df-test-plan-${{ github.run_id }}"
  APP_INSIGHTS_NAME: "df-test-ai-${{ github.run_id }}"

jobs:
  deploy-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        run: |
          az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}

      - name: Deploy Azure Resources with Bicep
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.RESOURCE_GROUP }}
          template: ./infra/main.bicep
          parameters: >
            functionAppName=${{ env.FUNCTION_APP_NAME }}
            storageAccountName=${{ env.STORAGE_ACCOUNT_NAME }}
            appServicePlanName=${{ env.APP_SERVICE_PLAN_NAME }}
            appInsightsName=${{ env.APP_INSIGHTS_NAME }}
          deploymentName: "durable-func-deployment-${{ github.run_id }}"

      - name: Debug - List Bicep Deployment Output
        run: |
          echo "=== Bicep Deployment Details ==="
          az deployment group show --name "durable-func-deployment-${{ github.run_id }}" --resource-group ${{ env.RESOURCE_GROUP }} --query properties.outputs
          echo "=== Function App Details ==="
          az functionapp show --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "{state:state, hostNames:hostNames, defaultHostName:defaultHostName}"
          echo "=== Storage Account Details ==="
          az storage account show --name ${{ env.STORAGE_ACCOUNT_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "{name:name, provisioningState:provisioningState, primaryEndpoints:primaryEndpoints}"

      - name: Install Function App dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "=== Installed Python Packages ==="
          pip list

      # Azure CLI deployment approach (no Azure Functions Core Tools)
      - name: Deploy Azure Functions code with Azure CLI
        run: |
          # Create a deployment package (zip file)
          echo "Creating deployment package..."
          zip -r function_app.zip . -x "*.git*" -x "frontend/*" -x "e2e-tests/*" -x "playwright.config.js" -x "__blobstorage__/*" -x "__queuestorage__/*"
          echo "=== Zip file contents ==="
          unzip -l function_app.zip | head -20

          # Debug - Check storage account key retrieval
          echo "=== Testing storage account key retrieval ==="
          STORAGE_KEY=$(az storage account keys list --account-name ${{ env.STORAGE_ACCOUNT_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query '[0].value' -o tsv)
          echo "Storage key retrieval status: $?"
          echo "Storage key length: ${#STORAGE_KEY} characters"

          # Debug - List current app settings before changes
          echo "=== Current app settings before update ==="
          az functionapp config appsettings list --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --output table

          # Configure Function App settings
          echo "Configuring Function App settings..."
          CONNECTION_STRING="DefaultEndpointsProtocol=https;AccountName=${{ env.STORAGE_ACCOUNT_NAME }};AccountKey=${STORAGE_KEY};EndpointSuffix=core.windows.net"
          echo "Connection string length: ${#CONNECTION_STRING} characters"

          az functionapp config appsettings set --name ${{ env.FUNCTION_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --settings FUNCTIONS_WORKER_RUNTIME=python \
                       FUNCTIONS_EXTENSION_VERSION=~4 \
                       WEBSITE_RUN_FROM_PACKAGE=1 \
                       AzureWebJobsStorage="${CONNECTION_STRING}"

          # Debug - Verify app settings were applied
          echo "=== App settings after update ==="
          az functionapp config appsettings list --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --output table

          # Configure CORS for Function App
          echo "Configuring CORS for Function App..."
          az functionapp cors add --name ${{ env.FUNCTION_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --allowed-origins "http://localhost:3000"

          # Debug - Verify CORS settings
          echo "=== CORS settings after update ==="
          az functionapp cors show --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }}

          # Deploy the zip package
          echo "Deploying Function App..."
          echo "=== Starting deployment at $(date) ==="
          DEPLOY_RESULT=$(az functionapp deployment source config-zip -g ${{ env.RESOURCE_GROUP }} -n ${{ env.FUNCTION_APP_NAME }} --src function_app.zip --debug)
          DEPLOY_STATUS=$?
          echo "Deployment exit status: $DEPLOY_STATUS"
          echo "Deployment result:"
          echo "$DEPLOY_RESULT"

          # Check deployment status
          echo "=== Checking deployment status ==="
          for i in {1..5}; do
            echo "Checking deployment status (attempt $i)..."
            LATEST_DEPLOYMENT=$(az functionapp deployment list --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "[0]" -o json)
            echo "$LATEST_DEPLOYMENT"
            DEPLOY_STATUS=$(echo $LATEST_DEPLOYMENT | jq -r '.properties.status' 2>/dev/null || echo "Unknown")
            echo "Current deployment status: $DEPLOY_STATUS"
            if [[ "$DEPLOY_STATUS" == "Success" ]]; then
              break
            fi
            sleep 30
          done

          # Wait for deployment to complete and function app to be ready
          echo "Waiting for deployment to stabilize..."
          sleep 180

          # Verify function is actually running
          echo "=== Verifying function app is running ==="
          FUNC_STATUS=$(az functionapp show --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "state" -o tsv)
          echo "Function app status: $FUNC_STATUS"

          # Get function URLs 
          echo "=== Function URLs ==="
          az functionapp function show --function-name HttpStart --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "invokeUrlTemplate" -o tsv

      # Create a simplified test that just verifies the API endpoint works
      - name: Create simplified API test
        run: |
          mkdir -p e2e-tests
          cat > e2e-tests/durable-function-test.spec.js << 'EOF'
          const { test, expect } = require('@playwright/test');

          test('should verify HTTP endpoint is available', async ({ request }) => {
            // Get the status URL directly from the API endpoint
            const response = await request.post(`https://${{ env.FUNCTION_APP_NAME }}.azurewebsites.net/api/orchestrators/HelloOrchestrator`, {
              timeout: 60000
            });
            
            console.log('Response status:', response.status());
            
            // Verify that we get a successful response code (2xx)
            expect(response.status()).toBeLessThan(300);
            expect(response.status()).toBeGreaterThanOrEqual(200);
            
            const responseBody = await response.json();
            console.log('Response body:', JSON.stringify(responseBody, null, 2));
            
            // Verify that the response contains a statusQueryGetUri
            expect(responseBody.statusQueryGetUri).toBeTruthy();
            console.log('StatusQueryGetUri:', responseBody.statusQueryGetUri);
          });
          EOF

      - name: Configure Playwright test config
        run: |
          cat > playwright.config.js << 'EOF'
          module.exports = {
            testDir: './e2e-tests',
            timeout: 90000,
            use: {
              headless: true,
              viewport: { width: 1280, height: 720 },
              ignoreHTTPSErrors: true,
              video: 'on-first-retry',
              screenshot: 'only-on-failure',
            },
            reporter: [ ['html'], ['list'] ]
          };
          EOF

      - name: Install Playwright
        run: |
          npm init -y
          npm install -D @playwright/test
          npx playwright install --with-deps chromium

      - name: Run Playwright Tests
        run: npx playwright test

      #      - name: Upload Playwright Report
      #        uses: actions/upload-artifact@v3
      #        if: always()
      #        with:
      #          name: playwright-report
      #          path: playwright-report/
      #          retention-days: 30

      # Clean up resources
#      - name: Clean up Azure Resources
#        if: always()
#        run: |
#          az group delete --name ${{ env.RESOURCE_GROUP }} --yes --no-wait
