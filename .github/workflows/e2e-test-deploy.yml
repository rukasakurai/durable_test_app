name: Deploy and Test Azure Function

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
  pull_request:
    branches: [main]
    paths-ignore:
      - "**.md"

env:
  RESOURCE_GROUP: "durable-func-test-rg-${{ github.run_id }}"
  LOCATION: "japaneast"
  FUNCTION_APP_NAME: "df-test-app-${{ github.run_id }}"
  STORAGE_ACCOUNT_NAME: "dfsa${{ github.run_id }}"
  APP_SERVICE_PLAN_NAME: "df-test-plan-${{ github.run_id }}"
  APP_INSIGHTS_NAME: "df-test-ai-${{ github.run_id }}"

jobs:
  deploy-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        run: |
          az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}

      - name: Deploy Azure Resources with Bicep
        uses: azure/arm-deploy@v2
        with:
          resourceGroupName: ${{ env.RESOURCE_GROUP }}
          template: ./infra/main.bicep
          parameters: >
            functionAppName=${{ env.FUNCTION_APP_NAME }}
            storageAccountName=${{ env.STORAGE_ACCOUNT_NAME }}
            appServicePlanName=${{ env.APP_SERVICE_PLAN_NAME }}
            appInsightsName=${{ env.APP_INSIGHTS_NAME }}
          deploymentName: "durable-func-deployment-${{ github.run_id }}"

      - name: Debug - List Bicep Deployment Output
        run: |
          echo "=== Bicep Deployment Details ==="
          az deployment group show --name "durable-func-deployment-${{ github.run_id }}" --resource-group ${{ env.RESOURCE_GROUP }} --query properties.outputs
          echo "=== Function App Details ==="
          az functionapp show --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "{state:state, hostNames:hostNames, defaultHostName:defaultHostName}"
          echo "=== Storage Account Details ==="
          az storage account show --name ${{ env.STORAGE_ACCOUNT_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "{name:name, provisioningState:provisioningState, primaryEndpoints:primaryEndpoints}"

      - name: Install Function App dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "=== Installed Python Packages ==="
          pip list

      # Configure Function App settings
      - name: Configure Function App settings
        run: |
          # Get storage account key
          STORAGE_KEY=$(az storage account keys list --account-name ${{ env.STORAGE_ACCOUNT_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query '[0].value' -o tsv)
          CONNECTION_STRING="DefaultEndpointsProtocol=https;AccountName=${{ env.STORAGE_ACCOUNT_NAME }};AccountKey=${STORAGE_KEY};EndpointSuffix=core.windows.net"

          # Configure app settings
          echo "Configuring Function App settings..."
          az functionapp config appsettings set --name ${{ env.FUNCTION_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --settings FUNCTIONS_WORKER_RUNTIME=python \
                       FUNCTIONS_EXTENSION_VERSION=~4 \
                       AzureWebJobsStorage="${CONNECTION_STRING}" \
                       SCM_DO_BUILD_DURING_DEPLOYMENT=true

          # Configure CORS for Function App
          echo "Configuring CORS for Function App..."
          az functionapp cors add --name ${{ env.FUNCTION_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --allowed-origins "http://localhost:3000"

      # Deploy Azure Function with the official Azure Functions GitHub Action
      - name: Deploy Azure Functions
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.FUNCTION_APP_NAME }}
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE || '' }}
          scm-do-build-during-deployment: true
          # Just deploy the code from this directory
          package: ./

      # Wait for function app to initialize properly
      - name: Wait for Function App to initialize
        run: |
          echo "Waiting for Function App to initialize (30 seconds)..."
          sleep 30

      # Check Function App logs to ensure proper initialization
      - name: Check Function App logs
        run: |
          echo "Checking Function App logs for common errors..."
          az webapp log tail --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }}

      # Health-check loop to verify function deployment
      - name: Function Health Check
        run: |
          echo "Starting health check for function app..."
          timeout=300  # 5 minutes timeout
          interval=10  # Check every 10 seconds
          endpoint="https://${{ env.FUNCTION_APP_NAME }}.azurewebsites.net/api/orchestrators/HelloOrchestrator"

          start_time=$(date +%s)
          end_time=$((start_time + timeout))

          while [ $(date +%s) -lt $end_time ]; do
            echo "Checking function health at $(date)..."
            
            status_code=$(curl -s -o /dev/null -w "%{http_code}" -X POST "${endpoint}")
            
            echo "Received status code: $status_code"
            
            # Check if status code is successful (2xx)
            if [ $status_code -ge 200 ] && [ $status_code -lt 300 ]; then
              echo "✅ Function is healthy and responding with status code: $status_code"
              break
            else
              echo "⏳ Function is not ready yet, status code: $status_code. Waiting $interval seconds..."
              sleep $interval
            fi
          done

          # Check if we exited due to timeout
          if [ $(date +%s) -ge $end_time ]; then
            echo "❌ Health check failed - Function did not become healthy within timeout period"
            exit 1
          fi

          echo "Function app deployment verified successfully!"

      # Create a simplified test that just verifies the API endpoint works
      - name: Create simplified API test
        run: |
          mkdir -p e2e-tests
          cat > e2e-tests/durable-function-test.spec.js << 'EOF'
          const { test, expect } = require('@playwright/test');

          test('should verify HTTP endpoint is available', async ({ request }) => {
            // Get the status URL directly from the API endpoint
            const response = await request.post(`https://${{ env.FUNCTION_APP_NAME }}.azurewebsites.net/api/orchestrators/HelloOrchestrator`, {
              timeout: 60000
            });
            
            console.log('Response status:', response.status());
            
            // Verify that we get a successful response code (2xx)
            expect(response.status()).toBeLessThan(300);
            expect(response.status()).toBeGreaterThanOrEqual(200);
            
            const responseBody = await response.json();
            console.log('Response body:', JSON.stringify(responseBody, null, 2));
            
            // Verify that the response contains a statusQueryGetUri
            expect(responseBody.statusQueryGetUri).toBeTruthy();
            console.log('StatusQueryGetUri:', responseBody.statusQueryGetUri);
          });
          EOF

      - name: Configure Playwright test config
        run: |
          cat > playwright.config.js << 'EOF'
          module.exports = {
            testDir: './e2e-tests',
            timeout: 90000,
            use: {
              headless: true,
              viewport: { width: 1280, height: 720 },
              ignoreHTTPSErrors: true,
              video: 'on-first-retry',
              screenshot: 'only-on-failure',
            },
            reporter: [ ['html'], ['list'] ]
          };
          EOF

      - name: Install Playwright
        run: |
          npm init -y
          npm install -D @playwright/test
          npx playwright install --with-deps chromium

      - name: Run Playwright Tests
        run: npx playwright test

      #      - name: Upload Playwright Report
      #        uses: actions/upload-artifact@v4
      #        if: always()
      #        with:
      #          name: playwright-report
      #          path: playwright-report/
      #          retention-days: 30

      # Clean up resources
#      - name: Clean up Azure Resources
#        if: always()
#        run: |
#          az group delete --name ${{ env.RESOURCE_GROUP }} --yes --no-wait
