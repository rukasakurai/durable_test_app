name: E2E Test with application deployed to Azure

on:
  workflow_dispatch:
    inputs:
      skip_cleanup:
        description: "Skip resource cleanup after workflow run?"
        required: false
        default: false
        type: boolean
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
  pull_request:
    branches: [main]
    paths-ignore:
      - "**.md"

env:
  RESOURCE_GROUP: "durable-func-test-rg-${{ github.run_id }}"
  LOCATION: "japaneast"
  FUNCTION_APP_NAME: "df-test-app-${{ github.run_id }}"
  STORAGE_ACCOUNT_NAME: "dfsa${{ github.run_id }}"
  APP_SERVICE_PLAN_NAME: "df-test-plan-${{ github.run_id }}"
  APP_INSIGHTS_NAME: "df-test-ai-${{ github.run_id }}"
  STATIC_WEB_APP_NAME: "df-swa-${{ github.run_id }}"

jobs:
  infrastructure:
    name: Deploy Azure Infrastructure
    runs-on: ubuntu-latest
    outputs:
      resource_group: ${{ env.RESOURCE_GROUP }}
      function_app_name: ${{ env.FUNCTION_APP_NAME }}
      static_web_app_name: ${{ env.STATIC_WEB_APP_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        run: |
          az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}

      - name: Deploy Azure Resources with Bicep
        uses: azure/arm-deploy@v2
        with:
          resourceGroupName: ${{ env.RESOURCE_GROUP }}
          template: ./infra/main.bicep
          parameters: >
            functionAppName=${{ env.FUNCTION_APP_NAME }}
            storageAccountName=${{ env.STORAGE_ACCOUNT_NAME }}
            appServicePlanName=${{ env.APP_SERVICE_PLAN_NAME }}
            appInsightsName=${{ env.APP_INSIGHTS_NAME }}
            staticWebAppName=${{ env.STATIC_WEB_APP_NAME }}
          deploymentName: "durable-func-deployment-${{ github.run_id }}"

      # Health-check loop to verify function app infrastructure is ready
      - name: Check Function App Infrastructure
        run: |
          echo "Verifying function app infrastructure is ready..."
          timeout=300  # 5 minutes timeout
          interval=10  # Check every 10 seconds
          endpoint="https://${{ env.FUNCTION_APP_NAME }}.azurewebsites.net"

          start_time=$(date +%s)
          end_time=$((start_time + timeout))

          while [ $(date +%s) -lt $end_time ]; do
            echo "Checking function app infrastructure at $(date)..."
            
            status_code=$(curl -s -o /dev/null -w "%{http_code}" -X GET "${endpoint}")
            
            echo "Received status code: $status_code"
            
            # We might get a 200, 403, or 404 when the app is provisioned but not yet deployed
            # Any of these codes means the infrastructure is ready
            if [ $status_code -eq 200 ] || [ $status_code -eq 403 ] || [ $status_code -eq 404 ]; then
              echo "✅ Function app infrastructure is ready with status code: $status_code"
              break
            else
              echo "⏳ Function app infrastructure is not ready yet, status code: $status_code. Waiting $interval seconds..."
              sleep $interval
            fi
          done

          # Check if we exited due to timeout
          if [ $(date +%s) -ge $end_time ]; then
            echo "❌ Infrastructure check failed - Function app did not become available within timeout period"
            exit 1
          fi

          echo "Function app infrastructure is verified successfully!"

  function-deployment:
    name: Deploy to Azure Functions
    needs: infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Deploy Azure Functions using CLI
      - name: Install Azure Functions Core Tools
        run: |
          npm install -g azure-functions-core-tools@4

      - name: Deploy Azure Functions using CLI
        run: |
          echo "Publishing function app using Azure Functions Core Tools..."
          func azure functionapp publish ${{ env.FUNCTION_APP_NAME }} --python --build-native-deps

      # Wait for function app to initialize properly
      - name: Wait for Function App to initialize
        run: |
          echo "Waiting for Function App to initialize (30 seconds)..."
          sleep 30

      # Health-check loop to verify function deployment
      - name: Function Health Check
        run: |
          echo "Starting health check for function app..."
          timeout=300  # 5 minutes timeout
          interval=10  # Check every 10 seconds
          endpoint="https://${{ env.FUNCTION_APP_NAME }}.azurewebsites.net/api/orchestrators/hello_orchestrator"

          start_time=$(date +%s)
          end_time=$((start_time + timeout))

          while [ $(date +%s) -lt $end_time ]; do
            echo "Checking function health at $(date)..."
            
            status_code=$(curl -s -o /dev/null -w "%{http_code}" -X POST "${endpoint}")
            
            echo "Received status code: $status_code"
            
            # Check if status code is successful (2xx)
            if [ $status_code -ge 200 ] && [ $status_code -lt 300 ]; then
              echo "✅ Function is healthy and responding with status code: $status_code"
              break
            else
              echo "⏳ Function is not ready yet, status code: $status_code. Waiting $interval seconds..."
              sleep $interval
            fi
          done

          # Check if we exited due to timeout
          if [ $(date +%s) -ge $end_time ]; then
            echo "❌ Health check failed - Function did not become healthy within timeout period"
            exit 1
          fi

          echo "Function app deployment verified successfully!"

  testing:
    name: Run Tests
    needs: [function-deployment, infrastructure]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Start the frontend React app locally for testing
      - name: Set up and start frontend React app
        run: |
          cd frontend
          npm install

          # Create a .env file with the Azure Function URL
          echo "REACT_APP_FUNCTION_URL=https://${{ env.FUNCTION_APP_NAME }}.azurewebsites.net" > .env

          # Start the React app in the background
          echo "Starting React app in background..."
          npm start &

          # Allow time for React app to start
          echo "Waiting for React app to start up (30 seconds)..."
          sleep 30

          # Verify that the React app is running
          echo "Verifying React app is running..."
          if curl -s http://localhost:3000 | grep -q "React"; then
            echo "✅ React app is running successfully"
          else
            echo "⚠️ React app might not be fully started yet, but continuing anyway..."
          fi

      # Update the Playwright test file to use deployed function endpoint but keep local frontend
      - name: Update Playwright test for deployment
        run: |
          # Create a modified version of the test file that uses the deployed function but local frontend
          sed "s|http://localhost:7071/api/orchestrators/HelloOrchestrator|https://${{ env.FUNCTION_APP_NAME }}.azurewebsites.net/api/orchestrators/hello_orchestrator|g" \
              tests/e2e/specs/durable-function-test.spec.js > tests/e2e/specs/durable-function-azure-test.spec.js

          # Print the modified file for debugging
          echo "Modified test file content:"
          cat tests/e2e/specs/durable-function-azure-test.spec.js

      - name: Install Playwright
        run: |
          npm install
          npx playwright install --with-deps chromium

      - name: Run Playwright Tests
        run: npx playwright test tests/e2e/specs/durable-function-azure-test.spec.js --config tests/e2e/playwright.config.ts

      - name: Install Locust
        run: |
          pip install locust

      - name: Run Locust load test locally
        run: |
          echo "Running Locust load test locally against deployed function app..."
          cd tests/load

          # Run locust in headless mode
          locust --host https://${{ env.FUNCTION_APP_NAME }}.azurewebsites.net \
                 --headless \
                 --users 1 \
                 --spawn-rate 1 \
                 --run-time 2s \
                 --csv=locust_results \
                 -f locustfile.py

          # Display results summary
          echo "Locust test results summary:"
          cat locust_results_stats.csv

          # Check for any failures
          if grep -q 'False' locust_results_stats.csv; then
            echo "Warning: Some requests failed during load testing"
          else
            echo "All requests succeeded during load testing"
          fi

      - name: Upload Locust Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: locust-results
          path: tests/load/locust_results_*.csv
          retention-days: 30

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  azure-load-testing:
    name: Azure Load Testing (Disabled)
    needs: [testing, infrastructure]
    if: false # Disabled for now
    runs-on: ubuntu-latest
    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Azure Load Testing resource
        run: |
          LOAD_TEST_RESOURCE_NAME="df-loadtest-${{ github.run_id }}"
          az version
          az upgrade --yes
          az version
          az extension add --name load --upgrade
          az load create \
            --name $LOAD_TEST_RESOURCE_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location ${{ env.LOCATION }}
          echo "Waiting for Azure Load Testing resource to be ready (10 seconds)..."
          sleep 10

      - name: Create Azure Load Test definition
        run: |
          LOAD_TEST_RESOURCE_NAME="df-loadtest-${{ github.run_id }}"
          cd tests/load
          sed "s/{{function_app_name}}/${{ env.FUNCTION_APP_NAME }}/g" config.yaml > config-deploy.yaml
          TEST_ID="test-${{ github.run_id }}"
          az version
          az load test create \
            --load-test-resource $LOAD_TEST_RESOURCE_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --test-id $TEST_ID \
            --load-test-config-file config-deploy.yaml \
            --test-plan locustfile.py \
            --test-type Locust \
            --display-name "Durable Function Load Test - ${{ github.run_id }}" \
            --description "Load test for Durable Functions"

      - name: Start Azure Load Test run and monitor
        continue-on-error: true # As of 2025-04-16 this step fails, potentially because `Command group 'load test-run' is in preview and under development`
        run: |
          LOAD_TEST_RESOURCE_NAME="df-loadtest-${{ github.run_id }}"
          cd tests/load
          TEST_ID="test-${{ github.run_id }}"
          TEST_RUN_ID="run-${{ github.run_id }}"
          az version
          az load test-run create \
            --load-test-resource $LOAD_TEST_RESOURCE_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --test-id $TEST_ID \
            --test-run-id $TEST_RUN_ID \
            --display-name "Durable Function Load Test - ${{ github.run_id }}" \
            --description "Load test for Durable Functions"
          STATUS="notStarted"
          while [[ "$STATUS" != "DONE" && "$STATUS" != "FAILED" && "$STATUS" != "CANCELLED" ]]; do
            STATUS=$(az load test-run show \
              --load-test-resource $LOAD_TEST_RESOURCE_NAME \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --test-id $TEST_ID \
              --test-run-id $TEST_RUN_ID \
              --query 'testRunStatus' -o tsv)
            echo "Test run status: $STATUS"
            sleep 15
          done
          echo "Load test results:"
          az load test-run show \
            --load-test-resource $LOAD_TEST_RESOURCE_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --test-id $TEST_ID \
            --test-run-id $TEST_RUN_ID
          TEST_RESULT=$(az load test-run show \
            --load-test-resource $LOAD_TEST_RESOURCE_NAME \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --test-id $TEST_ID \
            --test-run-id $TEST_RUN_ID \
            --query 'testResult' -o tsv)
          if [[ "$TEST_RESULT" != "PASSED" ]]; then
            echo "⚠️ Load test did not pass: $TEST_RESULT"
          else
            echo "✅ Load test passed successfully!"

      - name: Upload Locust Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: locust-results
          path: tests/load/locust_results_*.csv
          retention-days: 30

  cleanup:
    name: Clean Up Resources
    needs: [infrastructure, testing]
    if: |
      always() && (
        github.event_name != 'workflow_dispatch' || github.event.inputs.skip_cleanup != 'true'
      )
    runs-on: ubuntu-latest
    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Clean up resources
      - name: Clean up Azure Resources
        run: |
          az group delete --name ${{ env.RESOURCE_GROUP }} --yes --no-wait
