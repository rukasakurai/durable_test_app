name: Deploy and Test Azure Function

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
  pull_request:
    branches: [main]
    paths-ignore:
      - "**.md"

env:
  RESOURCE_GROUP: "durable-func-test-rg-${{ github.run_id }}"
  LOCATION: "eastus"
  FUNCTION_APP_NAME: "df-test-app-${{ github.run_id }}"
  STORAGE_ACCOUNT_NAME: "dfsa${{ github.run_id }}"
  APP_SERVICE_PLAN_NAME: "df-test-plan-${{ github.run_id }}"
  APP_INSIGHTS_NAME: "df-test-ai-${{ github.run_id }}"

jobs:
  deploy-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        run: |
          az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}

      - name: Deploy Azure Resources with Bicep
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.RESOURCE_GROUP }}
          template: ./infra/main.bicep
          parameters: >
            functionAppName=${{ env.FUNCTION_APP_NAME }}
            storageAccountName=${{ env.STORAGE_ACCOUNT_NAME }}
            appServicePlanName=${{ env.APP_SERVICE_PLAN_NAME }}
            appInsightsName=${{ env.APP_INSIGHTS_NAME }}
          deploymentName: "durable-func-deployment-${{ github.run_id }}"

      - name: Install Function App dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy Azure Functions code
        run: |
          pip install --upgrade azure-functions-core-tools==4.*
          func azure functionapp publish ${{ env.FUNCTION_APP_NAME }} --python

      - name: Install Frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Start Frontend server in the background
        working-directory: ./frontend
        run: |
          npm start &
          echo "Waiting for frontend server to start..."
          sleep 20

      # Install Playwright and create test
      - name: Install Playwright
        run: |
          npm init -y
          npm install -D @playwright/test
          npx playwright install --with-deps chromium

      - name: Create Playwright Test
        run: |
          mkdir -p e2e-tests
          cat > e2e-tests/durable-function-test.spec.js << 'EOF'
          const { test, expect } = require('@playwright/test');

          test('should start orchestration and verify statusQueryGetUri', async ({ page }) => {
            // Navigate to the React app
            await page.goto('http://localhost:3000');
            
            // Click the "Start Orchestration" button
            await page.click('text=Start Orchestration');
            
            // Wait for the status URL to appear
            const statusUrlElement = await page.waitForSelector('code', { timeout: 30000 });
            const statusUrl = await statusUrlElement.innerText();
            
            // Log and verify the statusQueryGetUri
            console.log('StatusQueryGetUri:', statusUrl);
            
            // Check that it's a valid URI
            expect(statusUrl).toBeTruthy();
            expect(statusUrl).toContain('http');
            
            // Parse the URL to verify it's valid
            expect(() => new URL(statusUrl)).not.toThrow();
          });
          EOF

      - name: Configure Playwright test config
        run: |
          cat > playwright.config.js << 'EOF'
          module.exports = {
            testDir: './e2e-tests',
            timeout: 60000,
            use: {
              headless: true,
              viewport: { width: 1280, height: 720 },
              ignoreHTTPSErrors: true,
              video: 'on-first-retry',
              screenshot: 'only-on-failure',
            },
            reporter: [ ['html'], ['list'] ]
          };
          EOF

      - name: Update Frontend API URL
        working-directory: ./frontend/src
        run: |
          sed -i "s|/api/orchestrators/hello_orchestrator|https://${{ env.FUNCTION_APP_NAME }}.azurewebsites.net/api/orchestrators/HelloOrchestrator|g" App.jsx

      - name: Run Playwright Tests
        run: npx playwright test

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      # Clean up resources
      - name: Clean up Azure Resources
        if: always()
        run: |
          az group delete --name ${{ env.RESOURCE_GROUP }} --yes --no-wait
